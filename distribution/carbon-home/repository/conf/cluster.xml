<!-- ================================================= -->
<!-- Cluster Configuration  -->
<!-- ================================================= -->
<!--
 To enable clustering for this node, set the value of "enable" attribute of the "clustering"
 element to "true". The initialization of a node in the cluster is handled by the class
 corresponding to the "class" attribute of the "clustering" element. It is also responsible for
 getting this node to join the cluster.
 -->
<cluster class="org.wso2.carbon.clustering.hazelcast.HazelcastClusteringAgent" enable="true">

    <!--
       The membership scheme used in this setup. The only values supported at the moment are
       "multicast" and "wka"

       1. multicast - membership is automatically discovered using multicasting
       2. wka - Well-Known Address based multicasting. Membership is discovered with the help
                of one or more nodes running at a Well-Known Address. New members joining a
                cluster will first connect to a well-known node, register with the well-known node
                and get the membership list from it. When new members join, one of the well-known
                nodes will notify the others in the group. When a member leaves the cluster or
                is deemed to have left the cluster, it will be detected by the Group Membership
                Service (GMS) using a TCP ping mechanism.
    -->
    <parameter name="membershipScheme">wka</parameter>
    <parameter name="licenseKey">xxx</parameter>
    <parameter name="mgtCenterURL">http://localhost:8081/mancenter/</parameter>

    <!--
     The clustering domain/group. Nodes in the same group will belong to the same multicast
     domain. There will not be interference between nodes in different groups.
    -->
    <parameter name="domain">wso2.carbon.domain</parameter>

    <!--
       When a Web service request is received, and processed, before the response is sent to the
       client, should we update the states of all members in the cluster? If the value of
       this parameter is set to "true", the response to the client will be sent only after
       all the members have been updated. Obviously, this can be time consuming. In some cases,
       such this overhead may not be acceptable, in which case the value of this parameter
       should be set to "false"
    -->
    <parameter name="synchronizeAll">true</parameter>

    <!--
      The maximum number of times we need to retry to send a message to a particular node
      before giving up and considering that node to be faulty
    -->
    <parameter name="maxRetries">10</parameter>

    <!-- The multicast address to be used -->
    <!--<parameter name="mcastAddress">228.0.0.4</parameter>-->

    <!-- The multicast port to be used -->
    <parameter name="mcastPort">45564</parameter>

    <parameter name="mcastTTL">50</parameter>

    <parameter name="mcastTimeout">30</parameter>

    <!-- The time interval within which if a member does not respond, the member will be
     deemed to have left the group (in ms)
     -->
    <parameter name="memberDropTime">3000</parameter>

    <!--
       The IP address of the network interface to which the multicasting has to be bound to.
       Multicasting would be done using this interface.
    -->
    <!--
        <parameter name="mcastBindAddress">127.0.0.1</parameter>
    -->
    <!-- The host name or IP address of this member -->

    <!--<parameter name="localMemberHost">localhost</parameter>-->
    <parameter name="localMemberHost">local.local</parameter>

    <!--
        The bind adress of this member. The difference between localMemberHost & localMemberBindAddress
        is that localMemberHost is the one that is advertised by this member, while localMemberBindAddress
        is the address to which this member is bound to.
    -->
    <!--
    <parameter name="localMemberBindAddress">127.0.0.1</parameter>
    -->

    <!--
    The TCP port used by this member. This is the port through which other nodes will
    contact this member
     -->
    <parameter name="localMemberPort">1111</parameter>

    <!--
        The bind port of this member. The difference between localMemberPort & localMemberBindPort
        is that localMemberPort is the one that is advertised by this member, while localMemberBindPort
        is the port to which this member is bound to.
    -->
    <!--
    <parameter name="localMemberBindPort">4001</parameter>
    -->

    <!--
    Properties specific to this member
    -->
    <parameter name="properties">
        <property name="backendServerURL" value="https://${hostName}:${httpsPort}/services/"/>
        <property name="mgtConsoleURL" value="https://${hostName}:${httpsPort}/"/>
        <property name="subDomain" value="worker"/>
    </parameter>

    <!--
       The list of static or well-known members. These entries will only be valid if the
       "membershipScheme" above is set to "wka"
    -->
    <members>
        <member>
            <hostName>local.local</hostName>
            <port>9010</port>
        </member>
    </members>

    <!--
    Enable the groupManagement entry if you need to run this node as a cluster manager.
    Multiple application domains with different GroupManagementAgent implementations
    can be defined in this section.
    -->
    <groupManagement enable="false">
        <applicationDomain name="apache.axis2.application.domain"
                           description="Axis2 group"
                           agent="org.apache.axis2.clustering.management.DefaultGroupManagementAgent"/>
    </groupManagement>
</cluster>